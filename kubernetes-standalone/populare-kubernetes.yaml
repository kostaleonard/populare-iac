apiVersion: apps/v1
kind: Deployment
metadata:
  name: populare
spec:
  replicas: 1
  minReadySeconds: 10
  selector:
    matchLabels:
      app: populare
  template:
    metadata:
      name: populare
      labels:
        app: populare
    spec:
      containers:
        - image: kostaleonard/populare:1.0.11
          name: populare
          ports:
            - containerPort: 80
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /version.json
              port: 80
            periodSeconds: 1
          livenessProbe:
            httpGet:
              path: /version.json
              port: 80
            initialDelaySeconds: 15
---
apiVersion: v1
kind: Service
metadata:
  name: populare
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: populare
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: populare-db-proxy
spec:
  replicas: 1
  minReadySeconds: 10
  selector:
    matchLabels:
      app: populare-db-proxy
  template:
    metadata:
      name: populare-db-proxy
      labels:
        app: populare-db-proxy
    spec:
      containers:
      - image: kostaleonard/populare_db_proxy:0.0.10
        name: populare-db-proxy
        ports:
        - containerPort: 8000
          protocol: TCP
        volumeMounts:
        - name: db-certs
          mountPath: /etc/populare-db-proxy/db-certs/
          readOnly: true
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          periodSeconds: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 15
      volumes:
      - name: db-certs
        secret:
          secretName: db-certs
---
apiVersion: v1
kind: Service
metadata:
  name: populare-db-proxy
spec:
  ports:
  - port: 80
    targetPort: 8000
  selector:
    app: populare-db-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reverse-proxy
spec:
  replicas: 1
  minReadySeconds: 10
  selector:
    matchLabels:
      app: reverse-proxy
  template:
    metadata:
      name: reverse-proxy
      labels:
        app: reverse-proxy
    spec:
      containers:
        - image: kostaleonard/populare-reverse-proxy:0.0.2
          name: reverse-proxy
          ports:
            - containerPort: 80
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            periodSeconds: 1
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 15
---
apiVersion: v1
kind: Service
metadata:
  name: reverse-proxy
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: reverse-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock-client
  template:
    metadata:
      name: mock-client
      labels:
        app: mock-client
    spec:
      containers:
        - image: yauritux/busybox-curl
          name: mock-client
          args:
            - sleep
            - "1000000"
          readinessProbe:
            exec:
              command:
                - echo
                - ok
            periodSeconds: 5
          livenessProbe:
            exec:
              command:
                - echo
                - ok
            periodSeconds: 5
            initialDelaySeconds: 15
---
# Usage instructions here: https://hub.docker.com/r/linuxserver/wireguard
# Great discussion on linuxserver/wireguard and Kubernetes here: https://github.com/linuxserver/docker-wireguard/issues/78
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wireguard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wireguard
  template:
    metadata:
      name: wireguard
      labels:
        app: wireguard
    spec:
      securityContext:
        sysctls:
          # Needs minikube start --extra-config="kubelet.allowed-unsafe-sysctls=net.ipv4.ip_forward"
          - name: net.ipv4.ip_forward
            value: '1'
      volumes:
        - name: dockerdata
          hostPath:
            path: /tmp
            type: Directory
        - name: host
          hostPath:
            path: /
            type: Directory
      containers:
        - image: linuxserver/wireguard
          name: wireguard
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - SYS_MODULE
          # Replace SERVERURL in client configuration with service URL
          volumeMounts:
            - name: dockerdata
              subPath: wireguard
              mountPath: /config
            - name: host
              subPath: lib/modules
              mountPath: /lib/modules
          env:
          - name: PUID
            value: '1000'
          - name: PGID
            value: '1000'
          - name: TZ
            value: 'America/Los_Angeles'
          - name: SERVERURL
            value: 'wireguard'
          - name: INTERNAL_SUBNET
            value: '10.13.13.0'
          - name: PEERS
            value: 'leo_mac'
          - name: PEERDNS
            value: 'auto'
          - name: ALLOWEDIPS
            value: 10.13.13.0/24
          ports:
          - containerPort: 51820
            protocol: UDP
---
apiVersion: v1
kind: Service
metadata:
  name: wireguard
  labels:
    app: wireguard
spec:
  type: LoadBalancer
  ports:
  - port: 51820
    targetPort: 51820
    protocol: UDP
  selector:
    app: wireguard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wireguard-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wireguard-client
  template:
    metadata:
      name: wireguard-client
      labels:
        app: wireguard-client
    spec:
      securityContext:
        sysctls:
          # Needs minikube start --extra-config="kubelet.allowed-unsafe-sysctls=net.ipv4.ip_forward"
          - name: net.ipv4.ip_forward
            value: '1'
      volumes:
        - name: host
          hostPath:
            path: /
            type: Directory
      containers:
        - image: linuxserver/wireguard
          name: wireguard
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
          volumeMounts:
            - name: host
              subPath: lib/modules
              mountPath: /lib/modules
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s
      external_labels:
        monitor: 'codelab-monitor'
    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 5s
        static_configs:
          - targets: ['localhost:9090']
#      - job_name: 'populare'
#        static_configs:
#          - targets: ['localhost:8080']
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      name: prometheus
      labels:
        app: prometheus
    spec:
      volumes:
        - name: config
          configMap:
            name: prometheus
      containers:
        - image: prom/prometheus
          name: prometheus
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
          ports:
            - containerPort: 9090
# TODO readiness and liveness probes
# TODO volume mount for data
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  ports:
    - port: 80
      targetPort: 9090
  selector:
    app: prometheus
